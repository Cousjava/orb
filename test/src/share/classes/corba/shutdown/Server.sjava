/*
 * Copyright (c) 1997, 2020 Oracle and/or its affiliates.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License v2.0
 * w/Classpath exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause OR GPL-2.0 WITH
 * Classpath-exception-2.0
 */

package corba.shutdown;

import HelloApp.*;
import com.sun.corba.ee.impl.orbutil.ORBConstants;

import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import java.util.Properties ;
import org.omg.PortableServer.*;

import com.sun.corba.ee.spi.oa.rfm.ReferenceFactoryManager ;
import com.sun.corba.ee.spi.oa.rfm.ReferenceFactory ;

/**
 * Servant implementation
 */
class helloServant extends helloPOA
{
    public String sayHello()
    {
        return "Hello world!";
    }
}

public class Server
{
    public static void main(String args[])
    {
        try {
            Properties props = new Properties(System.getProperties());
            props.setProperty( ORBConstants.PERSISTENT_SERVER_PORT_PROPERTY,
                Integer.toString( argData.port() + instance ) ) ;
            props.setProperty( ORBConstants.ORB_ID_PROPERTY,
                "serverORB" ) ;
            props.setProperty( ORBConstants.ORB_SERVER_ID_PROPERTY,
                "300" ) ;
            props.setProperty( ORBConstants.RFM_PROPERTY,
                "1" ) ;
            ORB orb = ORB.init(args, props);
        
        // Get the RFM and naming service
        ReferenceFactoryManager rfm = null ;

        try {
            rfm = ReferenceFactoryManager.class.cast( 
                serverORB.resolve_initial_references( "ReferenceFactoryManager" )) ;
            rfm.activate() ;
            serverNamingRoot = NamingContextExtHelper.narrow(
                serverORB.resolve_initial_references( "NameService" )) ;
        } catch (Exception exc) {
            fatal( "Exception in getting initial references: " + exc, exc ) ;
        }

        TestServantLocator locator = new TestServantLocator( serverORB ) ;
        PresentationManager pm = ORB.getPresentationManager() ;

        String repositoryId ;
        try {
            repositoryId = pm.getRepositoryId( new TestImpl() ) ;
        } catch (Exception exc) {
            throw new RuntimeException( exc ) ;
        }
      
            // Get rootPOA
            POA rootPOA = (POA)orb.resolve_initial_references("RootPOA");
            rootPOA.the_POAManager().activate();
      
            // create servant and register it with the ORB
            helloServant helloRef = new helloServant();
      
            byte[] id = rootPOA.activate_object(helloRef);
      
            // get the root naming context
            org.omg.CORBA.Object objRef = 
                orb.resolve_initial_references("NameService");
            NamingContext ncRef = NamingContextHelper.narrow(objRef);
      
            // bind the Object Reference in Naming
            NameComponent nc = new NameComponent("Hello", "");
            NameComponent path[] = {nc};
      
            org.omg.CORBA.Object ref = rootPOA.id_to_reference(id);
            
            ncRef.rebind(path, ref);
            
            // Emit the handshake the test framework expects
            // (can be changed in Options by the running test)
            System.out.println ("Server is ready.");

            // Wait for clients
            orb.run();
            
        } catch (Exception e) {
            System.err.println("ERROR: " + e);
            e.printStackTrace(System.out);

            // Make sure to exit with a value greater than 0 on
            // error.
            System.exit(1);
        }
    }
}
